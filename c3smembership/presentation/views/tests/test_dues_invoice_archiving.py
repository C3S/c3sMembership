# -*- coding: utf-8 -*-
"""
Test the c3smembership.presentation.views.dues_invoice_archiving package
"""

import unittest

import mock
from pyramid import testing
from webob.multidict import MultiDict

from c3smembership.presentation.views.dues_invoice_archiving import \
    batch_archive_pdf_invoices


class TestDuesInvoiceArchiving(unittest.TestCase):
    """
    Test the dues_invoice_archiving package
    """

    def setUp(self):
        """
        Set up testing

        Initialize Pyramid testing, dummy request and repository mock
        """
        self.request = testing.DummyRequest()
        self.config = testing.setUp(request=self.request)
        self.config.registry.dues_invoice_archiving = mock.Mock()
        # configure two stats as the repository is requested twice on form
        # submits, before archiving and then again afterwards
        self.config.registry.dues_invoice_archiving.get_archiving_stats \
            .side_effect = ['archiving_stats', 'archiving_stats']
        self.config.registry.dues_invoice_archiving.get_configured_years \
            .side_effect = [[2015]]

    def tearDown(self):
        """
        Tear down the testing setup
        """
        testing.tearDown()

    def test_get(self):
        """
        Test a GET request to the view
        """
        result = batch_archive_pdf_invoices(self.request)
        self._validate_result(result, [])

    def test_post_all_invoices(self):
        """
        Test a POST request to the view generating all remaining invoices
        """
        self._configure_missing_invoices_generated(['invoice1', 'invoice2'])
        self._configure_post_request(2015, 1)

        result = batch_archive_pdf_invoices(self.request)
        self._validate_result(result, ['invoice1', 'invoice2'])
        self._validate_flash_message(
            'success',
            [u'Success', u'2 invoices', u'no more'])

    def test_post_some_invoices(self):
        """
        Test a POST request to the view generating some remaining invoices
        """
        self._configure_missing_invoices_generated(['invoice1'])
        self._configure_post_request(2015, 1)

        result = batch_archive_pdf_invoices(self.request)

        self._validate_result(result, ['invoice1'])
        self._validate_flash_message(
            'success',
            [u'Success', u'1 invoices', u'might be more'])

    def test_post_nothing_left(self):
        """
        Test a POST request to the view with no remaining invoices left
        """
        self._configure_missing_invoices_generated([])
        self._configure_post_request(2015, 1)

        result = batch_archive_pdf_invoices(self.request)

        self._validate_result(result, [])
        self._validate_flash_message('success', [u'were no invoices'])

    def test_post_error(self):
        """
        Test a POST request to the view with an error occurring while invoice
        generation
        """
        self._configure_missing_invoices_generated()
        self._configure_post_request(2015, 1)

        result = batch_archive_pdf_invoices(self.request)

        self._validate_result(result, None)
        self._validate_flash_message('danger', [u'error'])

    def test_post_count_zero(self):
        """
        Test a POST request to the view with count zero
        """
        self._configure_missing_invoices_generated()
        self._configure_post_request(2015, 0)

        result = batch_archive_pdf_invoices(self.request)

        self._validate_result(result, [])
        self.assertTrue(
            u'There was a problem with your submission' in result['form'])

    def test_post_count_negative(self):
        """
        Test a POST request to the view with count negative
        """
        self._configure_missing_invoices_generated()
        self._configure_post_request(2015, -10)

        result = batch_archive_pdf_invoices(self.request)

        self._validate_result(result, [])
        self.assertTrue(
            u'There was a problem with your submission' in result['form'])

    def _configure_missing_invoices_generated(self, invoices=None):
        """
        Configure the invoices to be generated by the business layer

        Args:
            invoices: Array. Invoices to be by the business layer as
                successfully generated.
        """
        self.config.registry.dues_invoice_archiving \
            .generate_missing_invoice_pdfs.side_effect = [invoices]

    def _configure_post_request(self, year, count):
        """
        Configure the request for a POST method with year and count

        Args:
            year: Integer. The year to be passed via the POST request.
            count: Integer. The count to be passed via the POST request.
        """
        self.request.method = 'POST'
        self.request.POST = MultiDict()
        self.request.POST.add('__formid__', u'form')
        self.request.POST.add('__start__', u'archive_invoices:mapping')
        self.request.POST.add('year', unicode(year))
        self.request.POST.add('count', unicode(count))
        self.request.POST.add('__end__', u'archive_invoices:mapping')

    def _validate_flash_message(self, queue, message_parts):
        """
        Validate that all message parts are included in the flash message of
        the specified queue

        Args:
            queue: String. The name of the flash message queue to be validated.
            message_parts: Array of String. Message parts which must be found
                in the flash message.
        """
        flash_message = self.request.session.pop_flash(queue)[0]
        for message_part in message_parts:
            self.assertTrue(message_part in flash_message)

    def _validate_result(self, result, expected_invoices):
        """
        Validate the request result

        Validate that:

        - all components generated_invoices, archiving_stats and form are part
          of the result.
        - archiving_stats are correct
        - generated_invoices are as specified

        Args:
            result: The request result to be validated
            expected_invoices: The invoices expected to be generated with the
                request
        """
        self.assertTrue('generated_invoices' in result)
        self.assertTrue('archiving_stats' in result)
        self.assertTrue('form' in result)
        self.assertEqual(result['archiving_stats'], 'archiving_stats')
        self.assertEqual(result['generated_invoices'], expected_invoices)
